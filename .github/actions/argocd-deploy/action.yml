name: 'Argocd Deploy'
description: 'Deploy via ArgoCD'
inputs:
  server:
    description: 'ArgoCD Server'
    required: true
  username:
    description: "ArgoCD Username"
    required: true
  password:
    description: "ArgoCD Password"
    required: true
  pr_number:
    description: "Pull Request Number"
    required: true
  secret-key:
    description: "key for decryption"
    required: true
  environment:
    description: "overlay name"
    required: true
runs:
  using: "composite"
  steps:
    - name: Install ArgoCD
      shell: bash
      run: |
        curl -sSL -o argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
        chmod +x argocd
        sudo mv argocd /usr/local/bin/

    - name: Set up Kubectl
      uses: azure/setup-kubectl@v1

    - name: Login to Argo CD
      shell: bash
      run: argocd login $ARGOCD_SERVER --grpc-web --username $ARGOCD_USERNAME --password $ARGOCD_PASSWORD
      env:
        ARGOCD_SERVER: ${{ inputs.server }}
        ARGOCD_USERNAME: ${{ inputs.username }}
        ARGOCD_PASSWORD: ${{ inputs.password }}

    - name: Define environment variables
      shell: bash
      run: |
        echo "ARGOCD_APP_NAME=nawhas-integration-${{ inputs.pr_number }}" >> $GITHUB_ENV
        echo "API_DOMAIN=api.pr-${{ inputs.pr_number }}.intg.k8s.nawhas.com" >> $GITHUB_ENV
        echo "WEB_DOMAIN=pr-${{ inputs.pr_number }}.intg.k8s.nawhas.com" >> $GITHUB_ENV
        echo "SEARCH_DOMAIN=search.pr-${{ inputs.pr_number }}.intg.k8s.nawhas.com" >> $GITHUB_ENV
    
    - name: Decrypt environment variables
      working-directory: ./k8s/overlays/${{ inputs.environment }}/env
      shell: bash
      run: |
        gpg --quiet --batch --yes --passphrase="$GPG_KEY" --output api.secret.env api.secret.env.gpg
        while IFS= read -r line; do
          if [[ "$line" == *=* ]]; then
            key=${line%%=*}
            value=${line#*=}
            echo "API_$key=$value" >> $GITHUB_ENV
          fi
        done < api.secret.env
      env:
        GPG_KEY: ${{ inputs.secret-key }}

    - name: echo out environment variables
      shell: bash
      run: |
        for var in $(compgen -e); do
          if [[ $var == API_* ]]; then
            echo "$var=${!var}"
          fi
        done

    # - name: create app with configs through helm
    #   shell: bash
    #   run: argocd app create $ARGOCD_APP_NAME --repo git@github.com:nawhas/nawhas.git --path k8s/helm/nawhas --dest-server https://kubernetes.default.svc --dest-namespace $ARGOCD_APP_NAME --revision ${{ github.head_ref }} --helm-set namespace=$ARGOCD_APP_NAME --helm-set api.image=nawhas/api --helm-set api.tag=latest --helm-set api.apiEnv.APP_DOMAIN=$API_DOMAIN --helm-set api.apiEnv.APP_KEY=EnterSomeValue --helm-set api.apiEnv.AWS_ACCESS_KEY_ID=EnterSomeValue --helm-set api.apiEnv.AWS_SECRET_ACCESS_KEY=EnterSomeValue --helm-set api.apiEnv.MEILISEARCH_KEY=EnterSomeValue --helm-set search.pvcName=search-volume-v1.3.2 --helm-set search.storageClassName=nfs-client --helm-set search.env.MEILI_MASTER_KEY=EnterSomeValue --helm-set queue.image=nawhas/api --helm-set queue.tag=latest --helm-set web.image=nawhas/web --helm-set web.tag=latest --helm-set web.env.API_BASE_URL=https://$API_DOMAIN/ --helm-set web.env.APP_DOMAIN=https://$WEB_DOMAIN/ --helm-set web.env.SEARCH_HOST=https://$SEARCH_DOMAIN/ --helm-set ingress.apiHost=$API_DOMAIN --helm-set ingress.webHost=$WEB_DOMAIN --helm-set ingress.searchHost=$SEARCH_DOMAIN --helm-set postgres.enabled=true --helm-set postgres.storageClassName=nfs-client
    #   env:
    #     ARGOCD_APP_NAME: ${{ env.ARGOCD_APP_NAME }}
    #     API_DOMAIN: ${{ env.API_DOMAIN }}
    #     WEB_DOMAIN: ${{ env.WEB_DOMAIN }}
    #     SEARCH_DOMAIN: ${{ env.SEARCH_DOMAIN }}

    # - name: Sync Argo CD Application
    #   shell: bash
    #   run: argocd app sync $ARGOCD_APP_NAME
    #   env:
    #     ARGOCD_APP_NAME: ${{ env.ARGOCD_APP_NAME }}