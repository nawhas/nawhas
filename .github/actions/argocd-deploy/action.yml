name: 'Argocd Deploy'
description: 'Deploy via ArgoCD'
inputs:
  server:
    description: 'ArgoCD Server'
    required: true
  username:
    description: "ArgoCD Username"
    required: true
  password:
    description: "ArgoCD Password"
    required: true
  pr_number:
    description: "Pull Request Number"
    required: true
  secret-key:
    description: "key for decryption"
    required: true
  environment:
    description: "overlay name"
    required: true
runs:
  using: "composite"
  steps:
    - name: Install ArgoCD
      shell: bash
      run: |
        curl -sSL -o argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
        chmod +x argocd
        sudo mv argocd /usr/local/bin/

    - name: Set up Kubectl
      uses: azure/setup-kubectl@v1

    - name: Login to Argo CD
      shell: bash
      run: argocd login $ARGOCD_SERVER --grpc-web --username $ARGOCD_USERNAME --password $ARGOCD_PASSWORD
      env:
        ARGOCD_SERVER: ${{ inputs.server }}
        ARGOCD_USERNAME: ${{ inputs.username }}
        ARGOCD_PASSWORD: ${{ inputs.password }}

    - name: create app with configs through helm
      shell: bash
      run: argocd app create nawhas-${{ inputs.pr_number }} --repo git@github.com:nawhas/nawhas.git --path k8s/helm/nawhas --dest-server https://kubernetes.default.svc --dest-namespace nawhas-${{ inputs.pr_number }} --helm-set namespace=nawhas-${{ inputs.pr_number }} --helm-set api.image=nawhas/api --helm-set api.tag=latest --helm-set api.apiEnv.APP_DOMAIN=pr-${{ inputs.pr_number }}.intg.k8s.nawhas.com --helm-set api.apiEnv.APP_KEY=EnterSomeValue --helm-set api.apiEnv.AWS_ACCESS_KEY_ID=EnterSomeValue --helm-set api.apiEnv.AWS_SECRET_ACCESS_KEY=EnterSomeValue --helm-set api.apiEnv.MEILISEARCH_KEY=EnterSomeValue --helm-set search.pvcName=search-volume-v1.3.2 --helm-set search.storageClassName=nfs-client --helm-set search.env.MEILI_MASTER_KEY=EnterSomeValue --helm-set queue.image=nawhas/api --helm-set queue.tag=latest --helm-set web.image=nawhas/web --helm-set web.tag=latest --helm-set web.env.API_BASE_URL=https://api.pr-${{ inputs.pr_number }}.intg.k8s.nawhas.com/ --helm-set web.env.APP_DOMAIN=https://pr-${{ inputs.pr_number }}.intg.k8s.nawhas.com/ --helm-set web.env.SEARCH_HOST=https://search.pr-${{ inputs.pr_number }}.intg.k8s.nawhas.com/ --helm-set ingress.apiHost=api.pr-${{ inputs.pr_number }}.intg.k8s.nawhas.com --helm-set ingress.webHost=pr-${{ inputs.pr_number }}.intg.k8s.nawhas.com --helm-set ingress.searchHost=search.pr-${{ inputs.pr_number }}.intg.k8s.nawhas.com --helm-set postgres.enabled=true --helm-set postgres.storageClassName=nfs-client

    # - name: Decrypt environment secrets
    #   working-directory: ./k8s/overlays/${{ inputs.environment }}/env
    #   shell: bash
    #   run: |
    #     gpg --quiet --batch --yes --passphrase="$GPG_KEY" --output api.secret.env api.secret.env.gpg
    #     gpg --quiet --batch --yes --passphrase="$GPG_KEY" --output web.secret.env web.secret.env.gpg
    #     gpg --quiet --batch --yes --passphrase="$GPG_KEY" --output search.secret.env search.secret.env.gpg
    #   env:
    #     GPG_KEY: ${{ inputs.secret-key }}

    # - name: Create Argo CD Application on the Fly
    #   env:
    #     PR_NUMBER: ${{ inputs.pr_number }}
    #   shell: bash
    #   run: |
    #     APP_NAME=nawhas-integration-${PR_NUMBER}
    #     DEST_NAMESPACE=nawhas-${PR_NUMBER}
    #     REPO_URL=git@github.com:nawhas/nawhas.git
    #     PATH_IN_REPO=k8s/overlays/integration
    #     # Dynamically create the Argo CD app definition
    #     cat <<EOF | argocd app create --upsert -f -
    #     apiVersion: argoproj.io/v1alpha1
    #     kind: Application
    #     metadata:
    #       name: $APP_NAME
    #     spec:
    #       project: nawhas
    #       source:
    #         repoURL: '$REPO_URL'
    #         targetRevision: HEAD
    #         path: '$PATH_IN_REPO'
    #       destination:
    #         server: 'https://kubernetes.default.svc'
    #         namespace: '$DEST_NAMESPACE'
    #       syncPolicy:
    #         automated: {}
    #     EOF
    # - name: Sync Argo CD Application
    #   env:
    #     PR_NUMBER: ${{ github.event.pull_request.number }}
    #   shell: bash
    #   run: |
    #     APP_NAME=nawhas-integration-${PR_NUMBER}
    #     argocd app sync $APP_NAME