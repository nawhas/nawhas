name: Staging Deploy

on:
  push:
    branches:
      - develop

env:
  API_IMAGE: nawhas/api
  WEB_IMAGE: nawhas/web

jobs:
  ################################################################
  # Cancel Previous Builds
  ################################################################
  cleanup:
    name: Cancel Previous Runs
    runs-on: ubuntu-latest
    steps:
      - uses: n1hility/cancel-previous-runs@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
  ################################################################
  # Notify Build Started
  ################################################################
  notify_start:
    name: Notify Build Started
    runs-on: ubuntu-latest
    steps:
      - name: Notify Build Started
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          channel: deploys
          status: STARTED
          color: warning
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
  ################################################################
  # Build & Test API Image
  ################################################################
  build_api:
    name: Build & Test API Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Docker Login
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD

      - name: Build API
        run: |
          docker build --file ./api/Dockerfile \
            -t $API_IMAGE:dev-${GITHUB_SHA::8} \
            -t $API_IMAGE:develop \
            --build-arg GITHUB_SHA="$GITHUB_SHA" \
            --build-arg GITHUB_REF=develop \
            ./api

      - name: Publish API
        run: |
          docker push $API_IMAGE:dev-${GITHUB_SHA::8}
          docker push $API_IMAGE:develop
  ################################################################
  # Build & Test Web Image
  ################################################################
  build_web:
    name: Build & Test Web Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Docker Login
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD

      - name: Decrypt Web secrets
        working-directory: ./k8s/overlays/staging/secrets
        run: |
          gpg --quiet --batch --yes --decrypt --passphrase="$GPG_KEY" --output web.staging.env web.staging.env.gpg
        env:
          GPG_KEY: ${{ secrets.GPG_KEY }}

      - name: Build Web
        run: |
          set -a
          . ./k8s/overlays/staging/secrets/web.staging.env
          set +a
          docker build --file ./nuxt/Dockerfile \
            -t $WEB_IMAGE:dev-${GITHUB_SHA::8} \
            -t $WEB_IMAGE:develop \
            --build-arg API_DOMAIN=$API_DOMAIN \
            --build-arg APP_DOMAIN=$APP_DOMAIN \
            --build-arg SEARCH_HOST=$SEARCH_HOST \
            ./nuxt

      - name: Publish Web
        run: |
          docker push $WEB_IMAGE:dev-${GITHUB_SHA::8}
          docker push $WEB_IMAGE:develop
  ################################################################
  # Deploy Staging Environment
  ################################################################
  deploy:
    name: Deploy Staging Environment
    runs-on: ubuntu-latest
    needs: [build_api, build_web]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Save DigitalOcean kubeconfig
        uses: digitalocean/action-doctl@v1.7.0
        env:
          DIGITALOCEAN_ACCESS_TOKEN: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
        with:
          args: kubernetes cluster kubeconfig show k8s-nawhas > $GITHUB_WORKSPACE/.kubeconfig

      - name: Decrypt secrets
        working-directory: ./k8s/overlays/staging/secrets
        run: |
          gpg --quiet --batch --yes --decrypt --passphrase="$GPG_KEY" --output api.staging.env api.staging.env.gpg
          gpg --quiet --batch --yes --decrypt --passphrase="$GPG_KEY" --output web.staging.env web.staging.env.gpg
          gpg --quiet --batch --yes --decrypt --passphrase="$GPG_KEY" --output search.staging.env search.staging.env.gpg
        env:
          GPG_KEY: ${{ secrets.GPG_KEY }}

      # Set up kustomize
      - name: Set up Kustomize
        working-directory: ./k8s/overlays/staging
        run: |
          curl -o kustomize --location https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
          chmod u+x ./kustomize

      # Deploy the Docker image to the GKE cluster
      - name: Deploy
        working-directory: ./k8s/overlays/staging
        run: |
          ./kustomize edit set image IMAGE:TAG=$API_IMAGE:dev-${GITHUB_SHA::8}
          ./kustomize edit set image WEB:TAG=$WEB_IMAGE:dev-${GITHUB_SHA::8}
          ./kustomize build . | kubectl --kubeconfig=$GITHUB_WORKSPACE/.kubeconfig apply -f -
          kubectl --kubeconfig=$GITHUB_WORKSPACE/.kubeconfig rollout status --timeout=3m deployment/api -n stg
          kubectl --kubeconfig=$GITHUB_WORKSPACE/.kubeconfig rollout status --timeout=3m deployment/web -n stg
          kubectl --kubeconfig=$GITHUB_WORKSPACE/.kubeconfig get services -o wide -n stg
  ################################################################
  # Notify Build Status
  ################################################################
  notify_failure:
    name: Notify Build Status
    runs-on: ubuntu-latest
    needs: [build_api, build_web, deploy]
    if: always()
    steps:
      - name: Notify Build Success
        uses: voxmedia/github-action-slack-notify-build@v1
        if: needs.build_api.result == 'success' && needs.build_web.result == 'success' && needs.deploy.result == 'success'
        with:
          channel: deploys
          status: SUCCESS
          color: good
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
      - name: Notify Build Failure
        uses: voxmedia/github-action-slack-notify-build@v1
        if: needs.build_api.result == 'failure' || needs.build_web.result == 'failure' || needs.deploy.result == 'failure'
        with:
          channel: deploys
          status: FAILED
          color: danger
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
