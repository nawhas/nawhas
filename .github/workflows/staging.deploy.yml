name: Staging Deploy

on:
  push:
    branches:
      - master

concurrency:
  group: staging
  cancel-in-progress: true

jobs:
  # Notify Build Started
  notify_start:
    name: Notify Build Started
    runs-on: ubuntu-latest
    steps:
      - name: Notify Build Started
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          channel: deploys
          status: STARTED
          color: warning
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
  # Build API Image
  build_api:
    name: Build Staging API Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Build
        uses: ./.github/actions/api-build
        with:
          docker-username: ${{ secrets.DOCKER_USERNAME }}
          docker-password: ${{ secrets.DOCKER_PASSWORD }}
          extra-tags: nawhas/api:staging
  # Lint Web App
  lint_web:
    name: Lint Web App
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Lint
        uses: ./.github/actions/web-lint
  # Build Web Image
  build_web:
    name: Build Web Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Build
        uses: ./.github/actions/web-build
        with:
          docker-username: ${{ secrets.DOCKER_USERNAME }}
          docker-password: ${{ secrets.DOCKER_PASSWORD }}
          extra-tags: nawhas/web:staging
  # Deploy Staging Environment
  deploy:
    name: Deploy Staging Environment
    runs-on: ubuntu-latest
    needs: [build_api, lint_web, build_web]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Save DigitalOcean kubeconfig
        uses: digitalocean/action-doctl@v1.7.0
        env:
          DIGITALOCEAN_ACCESS_TOKEN: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
        with:
          args: kubernetes cluster kubeconfig show k8s-nawhas > $GITHUB_WORKSPACE/.kubeconfig

      - name: Decrypt secrets
        working-directory: ./k8s/overlays/staging/secrets
        run: |
          gpg --quiet --batch --yes --decrypt --passphrase="$GPG_KEY" --output api.staging.env api.staging.env.gpg
          gpg --quiet --batch --yes --decrypt --passphrase="$GPG_KEY" --output web.staging.env web.staging.env.gpg
          gpg --quiet --batch --yes --decrypt --passphrase="$GPG_KEY" --output search.staging.env search.staging.env.gpg
        env:
          GPG_KEY: ${{ secrets.GPG_KEY }}

      - name: Set up Kustomize
        working-directory: ./k8s/overlays/staging
        run: |
          curl -o kustomize --location https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
          chmod u+x ./kustomize

      - name: Deploy
        working-directory: ./k8s/overlays/staging
        run: |
          ./kustomize edit set image IMAGE:TAG=$API_IMAGE:dev-${GITHUB_SHA::8}
          ./kustomize edit set image WEB:TAG=$WEB_IMAGE:dev-${GITHUB_SHA::8}
          ./kustomize build . | kubectl --kubeconfig=$GITHUB_WORKSPACE/.kubeconfig apply -f -
          kubectl --kubeconfig=$GITHUB_WORKSPACE/.kubeconfig rollout status --timeout=3m deployment/api -n stg
          kubectl --kubeconfig=$GITHUB_WORKSPACE/.kubeconfig rollout status --timeout=3m deployment/web -n stg
          kubectl --kubeconfig=$GITHUB_WORKSPACE/.kubeconfig get services -o wide -n stg
  # Notify Build Status
  notify_failure:
    name: Notify Build Status
    runs-on: ubuntu-latest
    needs: [build_api, build_web, deploy]
    if: always()
    steps:
      - name: Notify Build Success
        uses: voxmedia/github-action-slack-notify-build@v1
        if: needs.build_api.result == 'success' && needs.build_web.result == 'success' && needs.deploy.result == 'success'
        with:
          channel: deploys
          status: SUCCESS
          color: good
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
      - name: Notify Build Failure
        uses: voxmedia/github-action-slack-notify-build@v1
        if: needs.build_api.result == 'failure' || needs.build_web.result == 'failure' || needs.deploy.result == 'failure'
        with:
          channel: deploys
          status: FAILED
          color: danger
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
