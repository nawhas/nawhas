name: Pull Request Build

on: [pull_request]

env:
  API_IMAGE: nawhas/api
  WEB_IMAGE: nawhas/web

jobs:
  ################################################################
  # Cancel Previous Builds
  ################################################################
  cleanup:
    name: Cancel Previous Runs
    runs-on: ubuntu-latest
    steps:
      - uses: n1hility/cancel-previous-runs@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
  ################################################################
  # Notify Build Started
  ################################################################
  notify_start:
    name: Notify Build Started
    runs-on: ubuntu-latest
    if: endsWith(github.head_ref, '-integration')
    steps:
      - name: Notify Build Started
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          channel: deploys
          status: STARTED
          color: warning
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
  ################################################################
  # Build & Test API Image
  ################################################################
  build_api:
    name: Build & Test API Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Docker Login
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          docker login -u ${{ env.DOCKER_USERNAME }} -p ${{ env.DOCKER_PASSWORD }}

      - name: Prepare Environment
        run: |
          pr_num=$(jq --raw-output .pull_request.number "${{ env.GITHUB_EVENT_PATH }}")
          namespace="intg-${pr_num}"
          api_domain="api.pr-${pr_num}.intg.k8s.nawhas.com"
          app_domain="pr-${pr_num}.intg.k8s.nawhas.com"
          sha="${{ env.GITHUB_SHA }}"
          api_image_tag="${{ env.API_IMAGE }}:${namespace}-${sha::8}"

          echo "NAMESPACE=$namespace" >> $GITHUB_ENV
          echo "PR_NUM=$pr_num" >> $GITHUB_ENV
          echo "API_DOMAIN=$api_domain" >> $GITHUB_ENV
          echo "APP_DOMAIN=$app_domain" >> $GITHUB_ENV
          echo "API_IMAGE_TAG=$api_image_tag" >> $GITHUB_ENV

      - name: Build API
        run: |
          docker build --file ./api/Dockerfile \
            -t "${{ env.API_IMAGE_TAG }} \
            --build-arg GITHUB_SHA="{{ env.GITHUB_SHA }}" \
            --build-arg GITHUB_REF="${{ env.NAMESPACE }}" \
            ./api

      - name: Publish API
        run: |
          docker push "${{ env.API_IMAGE_TAG }}"
  ################################################################
  # Test & Lint Web App
  ################################################################
  test_web:
    name: Test & Lint Web App
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: nuxt
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - uses: actions/setup-node@v1
        with:
          node-version: '13.x'

      - name: Install Dependencies
        run: yarn install --frozen-lockfile

      - name: Lint Codebase
        run: NODE_ENV=production yarn lint --no-fix --format stylish
  ################################################################
  # Build Web Image
  ################################################################
  build_web:
    name: Build & Test Web Image
    runs-on: ubuntu-latest
    needs: test_web
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Docker Login
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          docker login -u ${{ env.DOCKER_USERNAME }} -p ${{ env.DOCKER_PASSWORD }}

      - name: Prepare Environment
        run: |
          pr_num=$(jq --raw-output .pull_request.number "${{ env.GITHUB_EVENT_PATH }}")
          namespace="intg-${pr_num}"
          api_domain="api.pr-${pr_num}.intg.k8s.nawhas.com"
          app_domain="pr-${pr_num}.intg.k8s.nawhas.com"
          search_host="search.pr-${pr_num}.intg.k8s.nawhas.com"
          sha="${{ env.GITHUB_SHA }}"
          web_app_version="$namespace-${sha::8}"
          web_image_tag="${{ env.WEB_IMAGE }}:$web_app_version"

          echo "NAMESPACE=$namespace" >> $GITHUB_ENV
          echo "PR_NUM=$pr_num" >> $GITHUB_ENV
          echo "API_DOMAIN=$api_domain" >> $GITHUB_ENV
          echo "APP_DOMAIN=$app_domain" >> $GITHUB_ENV
          echo "SEARCH_HOST=$search_host" >> $GITHUB_ENV
          echo "WEB_IMAGE_TAG=$web_image_tag" >> $GITHUB_ENV
          echo "WEB_APP_VERSION=$web_app_version" >> $GITHUB_ENV

      - name: Decrypt Web secrets
        working-directory: ./k8s/overlays/integration/secrets
        run: |
          gpg --quiet --batch --yes --decrypt --passphrase="$GPG_KEY" --output web.integration.env web.integration.env.gpg
        env:
          GPG_KEY: ${{ secrets.GPG_KEY }}

      - name: Build Web
        run: |
          cp ./k8s/overlays/integration/secrets/web.integration.env ./nuxt/.env.docker

          printf "\nAPI_BASE_URL=https://${{ env.API_DOMAIN }}/" >> ./nuxt/.env.docker
          printf "\nAPP_DOMAIN=https://${{ env.APP_DOMAIN }}" >> ./nuxt/.env.docker
          printf "\nSEARCH_HOST=https://${{ env.SEARCH_HOST }}" >> ./nuxt/.env.docker

          docker build --file ./nuxt/Dockerfile \
            -t "${{ env.WEB_IMAGE_TAG }}" \
            --build-arg APP_VERSION="${{ env.WEB_APP_VERSION }}" \
            ./nuxt

      - name: Publish Web
        run: |
          docker push "${{ env.WEB_IMAGE_TAG }}"

  ################################################################
  # Deploy Integration Environment
  ################################################################
  deploy:
    name: Deploy Integration Environment
    runs-on: ubuntu-latest
    needs: [build_api, build_web]
    if: endsWith(github.head_ref, '-integration')
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Save DigitalOcean kubeconfig
        uses: digitalocean/action-doctl@v1.7.0
        env:
          DIGITALOCEAN_ACCESS_TOKEN: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
        with:
          args: kubernetes cluster kubeconfig show k8s-nawhas > $GITHUB_WORKSPACE/.kubeconfig

      - name: Decrypt secrets
        working-directory: ./k8s/overlays/integration/secrets
        run: |
          gpg --quiet --batch --yes --decrypt --passphrase="$GPG_KEY" --output api.integration.env api.integration.env.gpg
          gpg --quiet --batch --yes --decrypt --passphrase="$GPG_KEY" --output web.integration.env web.integration.env.gpg
          gpg --quiet --batch --yes --decrypt --passphrase="$GPG_KEY" --output search.integration.env search.integration.env.gpg
        env:
          GPG_KEY: ${{ secrets.GPG_KEY }}

      - name: Prepare Environment
        run: |
          pr_num=$(jq --raw-output .pull_request.number "${{ env.GITHUB_EVENT_PATH }}")
          namespace="intg-${pr_num}"
          api_domain="api.pr-${pr_num}.intg.k8s.nawhas.com"
          app_domain="pr-${pr_num}.intg.k8s.nawhas.com"
          search_host="search.pr-${pr_num}.intg.k8s.nawhas.com"
          mail_host="mail.pr-${pr_num}.intg.k8s.nawhas.com"

          echo "NAMESPACE=$namespace" >> $GITHUB_ENV
          echo "PR_NUM=$pr_num" >> $GITHUB_ENV
          echo "API_DOMAIN=$api_domain" >> $GITHUB_ENV
          echo "APP_DOMAIN=$app_domain" >> $GITHUB_ENV
          echo "SEARCH_HOST=$search_host" >> $GITHUB_ENV
          echo "MAIL_HOST=$mail_host" >> $GITHUB_ENV

      - name: Prepare Secrets
        working-directory: ./k8s/overlays/integration/secrets
        run: |
          printf "\nAPP_DOMAIN=${{ env.APP_DOMAIN }}" >> api.integration.env
          printf "\nALGOLIA_PREFIX=intg_${{ env.PR_NUM }}_" >> api.integration.env
          printf "\nSESSION_COOKIE_PREFIX=intg_${{ env.PR_NUM }}_" >> api.integration.env

      # Set up kustomize
      - name: Set up Kustomize
        working-directory: ./k8s/overlays/integration
        run: |
          curl -o kustomize --location https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
          chmod u+x ./kustomize

      - name: Prepare Kustomization
        working-directory: ./k8s/overlays/integration
        run: |
          ./kustomize edit set image "IMAGE:TAG=${{ env.API_IMAGE }}:${{ env.API_IMAGE_TAG }}"
          ./kustomize edit set image "WEB:TAG=${{ env.WEB_IMAGE }}:${{ env.WEB_IMAGE_TAG }}"
          ./kustomize edit set namespace "${{ env.NAMESPACE }}"

      - name: Create Namespace
        working-directory: ./k8s/overlays/integration
        run: |
          if [[ $(kubectl --kubeconfig=${{ env.GITHUB_WORKSPACE }}/.kubeconfig get namespace | grep "${{ env.NAMESPACE }}") == "" ]]; then
            echo "Namespace does not exist!";
            kubectl --kubeconfig=${{ env.GITHUB_WORKSPACE }}/.kubeconfig create namespace "${{ env.NAMESPACE }}"
          fi

      # Deploy the Docker image to the GKE cluster
      - name: Deploy
        working-directory: ./k8s/overlays/integration
        run: |
          ./kustomize build . \
            | sed "s/ING_APP_DOMAIN/${{ env.APP_DOMAIN }}/g" \
            | sed "s/ING_API_DOMAIN/${{ env.API_DOMAIN }}/g" \
            | sed "s/ING_SEARCH_HOST/${{ env.SEARCH_HOST }}/g" \
            | sed "s/ING_MAIL_HOST/${{ env.MAIL_HOST }}/g" \
            | kubectl --kubeconfig=${{ env.GITHUB_WORKSPACE }}/.kubeconfig apply -f -

          kubectl --kubeconfig=${{ env.GITHUB_WORKSPACE }}/.kubeconfig rollout status --timeout=2m deployment/api -n ${{ env.NAMESPACE }}
          kubectl --kubeconfig=${{ env.GITHUB_WORKSPACE }}/.kubeconfig rollout status --timeout=2m deployment/web -n ${{ env.NAMESPACE }}
          kubectl --kubeconfig=${{ env.GITHUB_WORKSPACE }}/.kubeconfig get services -o wide -n ${{ env.NAMESPACE }}

      - name: Post Link on PR
        if: success()
        uses: unsplash/comment-on-pr@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          msg: "Your integration branch has been deployed to https://${{ env.APP_DOMAIN }}"
  ################################################################
  # Notify Build Status
  ################################################################
  notify_failure:
    name: Notify Build Status
    runs-on: ubuntu-latest
    needs: [build_api, build_web, deploy]
    if: always()
    steps:
      - name: Notify Build Success
        uses: voxmedia/github-action-slack-notify-build@v1
        if: needs.build_api.result == 'success' && needs.build_web.result == 'success' && needs.deploy.result == 'success'
        with:
          channel: deploys
          status: SUCCESS
          color: good
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
      - name: Notify Build Failure
        uses: voxmedia/github-action-slack-notify-build@v1
        if: needs.build_api.result == 'failure' || needs.build_web.result == 'failure' || needs.deploy.result == 'failure'
        with:
          channel: deploys
          status: FAILED
          color: danger
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
