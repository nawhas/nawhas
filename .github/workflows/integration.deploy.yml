name: Pull Request Build

on: [pull_request]

concurrency:
  group: integration
  cancel-in-progress: true

jobs:
  # Notify Build Started
  notify_start:
    name: Notify Build Started
    runs-on: ubuntu-latest
    if: endsWith(github.head_ref, '-integration')
    steps:
      - name: Notify Build Started
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          channel: deploys
          status: STARTED
          color: warning
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
  # Setup Job
  setup:
    name: Setup Workflow
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Determine PR Number
        id: environment
        run: |
          pr_num="$EVENT_NUMBER"
          short_sha="${SHA::8}"
          echo "::set-output name=pr_num::${pr_num}"
          echo "::set-output name=short_sha::${short_sha}"
        env:
          EVENT_NUMBER: ${{github.event.number}}
          SHA: ${{ github.sha }}
    outputs:
      pr_num: ${{ steps.environment.outputs.pr_num }}
      short_sha: ${{ steps.environment.outputs.short_sha }}
  # Build API Image
  build_api:
    name: Build API Image
    runs-on: ubuntu-latest
    needs: [setup]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Build
        uses: ./.github/actions/api-build
        with:
          docker-username: ${{ secrets.DOCKER_USERNAME }}
          docker-password: ${{ secrets.DOCKER_PASSWORD }}
          extra-tags: |
            nawhas/api:pr-${{ needs.setup.outputs.pr_num }}
            nawhas/api:pr-${{ needs.setup.outputs.pr_num }}-${{ needs.setup.outputs.short_sha }}
  # Lint Web App
  lint_web:
    name: Lint Web App
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Lint
        uses: ./.github/actions/web-lint
  # Build Web Image
  build_web:
    name: Build Web Image
    runs-on: ubuntu-latest
    needs: [setup]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Build
        uses: ./.github/actions/web-build
        with:
          docker-username: ${{ secrets.DOCKER_USERNAME }}
          docker-password: ${{ secrets.DOCKER_PASSWORD }}
          extra-tags: |
            nawhas/web:pr-${{ needs.setup.outputs.pr_num }}
            nawhas/web:pr-${{ needs.setup.outputs.pr_num }}-${{ needs.setup.outputs.short_sha }}
  dusk:
    name: Run Dusk Tests
    runs-on: ubuntu-latest
    needs: [setup, build_api, build_web]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build Test API Image
        uses: docker/build-push-action@v2
        with:
          context: ./api
          push: false
          load: true
          target: test
          tags: nawhas/api:test
          cache-from: type=registry,ref=nawhas/api:buildcache

      - name: Prepare .env.ci
        run: |
          cp api/.env.ci.example api/.env.ci

      - name: Pull Services
        run: |
          ./dev --ci pull -q api web nginx mail selenium db search cache
        env:
          API_IMAGE_TAG: dev-${{ needs.setup.outputs.short_sha }}
          WEB_IMAGE_TAG: dev-${{ needs.setup.outputs.short_sha }}
          API_TEST_IMAGE_TAG: test

      - name: Run Dusk Tests
        run: |
          ./dev --ci dusk
        env:
          API_IMAGE_TAG: dev-${{ needs.setup.outputs.short_sha }}
          WEB_IMAGE_TAG: dev-${{ needs.setup.outputs.short_sha }}
          API_TEST_IMAGE_TAG: test

      - name: Dump docker logs on failure
        if: failure()
        uses: jwalton/gh-docker-logs@v1

      - name: Upload Screenshots
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: screenshots
          path: api/tests/Browser/screenshots

      - name: Upload Console Logs
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: console
          path: api/tests/Browser/console
  ################################################################
  # Deploy Integration Environment
  ################################################################
  deploy:
    name: Deploy Integration Environment
    runs-on: ubuntu-latest
    needs: [lint_web, build_web, build_api]
    if: endsWith(github.head_ref, '-integration')
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Save DigitalOcean kubeconfig
        uses: digitalocean/action-doctl@v1.7.0
        env:
          DIGITALOCEAN_ACCESS_TOKEN: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
        with:
          args: kubernetes cluster kubeconfig show k8s-nawhas > $GITHUB_WORKSPACE/.kubeconfig

      - name: Decrypt secrets
        working-directory: ./k8s/overlays/integration/secrets
        run: |
          gpg --quiet --batch --yes --decrypt --passphrase="$GPG_KEY" --output api.integration.env api.integration.env.gpg
          gpg --quiet --batch --yes --decrypt --passphrase="$GPG_KEY" --output web.integration.env web.integration.env.gpg
          gpg --quiet --batch --yes --decrypt --passphrase="$GPG_KEY" --output search.integration.env search.integration.env.gpg
        env:
          GPG_KEY: ${{ secrets.GPG_KEY }}

      - name: Prepare Environment
        run: |
          ./scripts/github/prepare-integration-environment.sh

      - name: Prepare Secrets
        working-directory: ./k8s/overlays/integration/secrets
        run: |
          printf "\nAPP_DOMAIN=${APP_DOMAIN}" >> api.integration.env
          printf "\nALGOLIA_PREFIX=${ALGOLIA_PREFIX}" >> api.integration.env
          printf "\nSESSION_COOKIE_PREFIX=${SESSION_COOKIE_PREFIX}" >> api.integration.env
      
          printf "\nAPI_BASE_URL=https://${API_DOMAIN}/" >> web.integration.env
          printf "\nAPP_DOMAIN=https://${APP_DOMAIN}" >> web.integration.env
          printf "\nSEARCH_HOST=https://${SEARCH_HOST}" >> web.integration.env

      # Set up kustomize
      - name: Set up Kustomize
        working-directory: ./k8s/overlays/integration
        run: |
          curl -o kustomize --location https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
          chmod u+x ./kustomize

      - name: Prepare Kustomization
        working-directory: ./k8s/overlays/integration
        run: |
          ./kustomize edit set image "IMAGE:TAG=${API_IMAGE_TAG}"
          ./kustomize edit set image "WEB:TAG=${WEB_IMAGE_TAG}"
          ./kustomize edit set namespace "${NAMESPACE}"

      - name: Create Namespace
        working-directory: ./k8s/overlays/integration
        run: |
          if [[ $(kubectl --kubeconfig=${GITHUB_WORKSPACE}/.kubeconfig get namespace | grep "${NAMESPACE}") == "" ]]; then
            echo "Namespace does not exist!";
            kubectl --kubeconfig=${GITHUB_WORKSPACE}/.kubeconfig create namespace "${NAMESPACE}"
          fi

      # Deploy the Docker image to the GKE cluster
      - name: Deploy
        working-directory: ./k8s/overlays/integration
        run: |
          ./kustomize build . \
            | sed "s/ING_APP_DOMAIN/${APP_DOMAIN}/g" \
            | sed "s/ING_API_DOMAIN/${API_DOMAIN}/g" \
            | sed "s/ING_SEARCH_HOST/${SEARCH_HOST}/g" \
            | sed "s/ING_MAIL_HOST/${MAIL_HOST}/g" \
            | kubectl --kubeconfig=${GITHUB_WORKSPACE}/.kubeconfig apply -f -

          kubectl --kubeconfig=${GITHUB_WORKSPACE}/.kubeconfig rollout status --timeout=2m deployment/api -n ${NAMESPACE}
          kubectl --kubeconfig=${GITHUB_WORKSPACE}/.kubeconfig rollout status --timeout=2m deployment/web -n ${NAMESPACE}
          kubectl --kubeconfig=${GITHUB_WORKSPACE}/.kubeconfig get services -o wide -n ${NAMESPACE}

      - name: Post Link on PR
        if: success()
        uses: unsplash/comment-on-pr@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          msg: "Your integration branch has been deployed to https://${{ env.APP_DOMAIN }}"
  ################################################################
  # Notify Build Status
  ################################################################
  notify_failure:
    name: Notify Build Status
    runs-on: ubuntu-latest
    needs: [build_api, build_web, deploy]
    if: endsWith(github.head_ref, '-integration')
    steps:
      - name: Notify Build Success
        uses: voxmedia/github-action-slack-notify-build@v1
        if: needs.build_api.result == 'success' && needs.build_web.result == 'success' && needs.deploy.result == 'success'
        with:
          channel: deploys
          status: SUCCESS
          color: good
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
      - name: Notify Build Failure
        uses: voxmedia/github-action-slack-notify-build@v1
        if: needs.build_api.result == 'failure' || needs.build_web.result == 'failure' || needs.deploy.result == 'failure'
        with:
          channel: deploys
          status: FAILED
          color: danger
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
